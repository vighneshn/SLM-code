# -*- coding: utf-8 -*-
  
#--------------------------------------------------------------------#
#                                                                    #
# Copyright (C) 2020 HOLOEYE Photonics AG. All rights reserved.      #
# Contact: https://holoeye.com/contact/                              #
#                                                                    #
# This file is part of HOLOEYE SLM Display SDK.                      #
#                                                                    #
# You may use this file under the terms and conditions of the        #
# "HOLOEYE SLM Display SDK Standard License v1.0" license agreement. #
#                                                                    #
#--------------------------------------------------------------------#

import numpy as np

# Shows a 2d matrix of grayscale data with data type uint8 (byte) on the SLM.
# The gray values have a range from 0 to 255, non-fitting values will be wrapped by the data type.
  
# Import the SLM Display SDK:
import detect_heds_module_path
from holoeye import slmdisplaysdk
 
# Make some enumerations available locally to avoid too much code:
ErrorCode = slmdisplaysdk.SLMDisplay.ErrorCode
ShowFlags = slmdisplaysdk.SLMDisplay.ShowFlags
  
# Initializes the SLM library
slm = slmdisplaysdk.SLMDisplay()
 
# Check if the library implements the required version
if not slm.requiresVersion(2):
    exit(1)

mask = np.load('phase_mask_np.npy')

# Detect SLMs and open a window on the selected SLM
error = slm.open()
assert error == ErrorCode.NoError, slm.errorString(error)
  
# Open the SLM preview window in "Fit" mode:
# Please adapt the file showSLMPreview.py if preview window
# is not at the right position or even not visible.
from showSLMPreview import showSLMPreview
showSLMPreview(slm, scale=0.0)
  
# Calculate e.g. a vertical blazed grating:
blazePeriod = 77
  
# Reserve memory for the data:
dataWidth = slm.width_px
dataHeight = slm.height_px
data = slmdisplaysdk.createFieldUChar(dataWidth, dataHeight)
print("dataWidth = " + str(dataWidth))
print("dataHeight = " + str(dataHeight))
  
# Calculate the data:
#for y in range(dataHeight):
    #row = data[y]
 
    #for x in range(dataWidth):
        #row[x] = int(256 * x / blazePeriod)

for i in range(1000):
    data = np.pi + (np.random.randn(1920, 1080))*np.pi
    error = slm.showData(data)
    
#mask = mask*2*np.pi/255
#data = mask
# Show data on SLM:
#error = slm.showData(data)
assert error == ErrorCode.NoError, slm.errorString(error)
  
# If your IDE terminates the python interpreter process after the script is finished, the SLM content
# will be lost as soon as the script finishes.
input("Press Enter")
# You may insert further code here.
slm.close()
# Wait until the SLM process is closed:
error = slm.utilsWaitUntilClosed()
assert error == ErrorCode.NoError, slm.errorString(error)
  
# Unloading the SDK may or may not be required depending on your IDE:
slm = None
